#!/bin/zsh

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

#---- base

export CURRENT_OS=$(uname)
export PATH=$HOME/bin:$PATH
export EDITOR='vim'

ulimit -n 1000

alias zshrc='source ~/.zshrc'
alias zshenv='source ~/.zshenv'
alias zprofile='source ~/.zprofile'

alias watch='watch '
alias w='watch '

# ref: http://blog.patshead.com/2012/11/automatically-expaning-zsh-global-aliases---simplified.html
globalias() {
   if [[ $LBUFFER =~ '[A-Z0-9]+$' ]]; then
     zle _expand_alias
   fi
   zle self-insert
}
zle -N globalias

#bindkey "^ " globalias
#bindkey "^ " magic-space
bindkey -M isearch " " magic-space

#autoload -U compinit; compinit
autoload -U +X compinit && compinit

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

alias df='df -h -x"squashfs"'

#---- iterm

#source ~/.iterm2_shell_integration.zsh

# https://coderwall.com/p/a8uxma/zsh-iterm2-osx-shortcuts
# ⌘ + ← or → - move one word backward/forward
bindkey "^[a" backward-word
bindkey "^[e" forward-word

# Other shortcuts
# - http://www.geekmind.net/2011/01/shortcuts-to-improve-your-bash-zsh.html

#---- ssh

if [[ ${CURRENT_OS} == "Darwin" ]]; then
  SSHPID=`ps ax|grep -c "[s]sh-agent"`
  if (( $SSHPID == 0 )); then
    rm -f $HOME/.ssh-env
    ssh-agent > $HOME/.ssh-env
    source $HOME/.ssh-env
    ssh-add $HOME/.ssh/hoth_dsa
  else
    source $HOME/.ssh-env
  fi
fi

# $1 host
# $2 tmux_name?
#
function rtmux {
  case "$2" in
	"") autossh -M 0 $1 -t "if tmux -qu has;       then tmux -qu attach;       else EDITOR=vim tmux -qu new;   fi";;
	*)  autossh -M 0 $1 -t "if tmux -qu has -t $2; then tmux -qu attach -t $2; else EDITOR=vim tmux new -s $2; fi";;
  esac
}

#---- git

alias git-list-merged="git branch -r --merged | grep -v master | sed 's/origin\///'"
alias git-delete-merged="git branch -r --merged | grep -v master | sed 's/origin\///' | xargs -n 1 git push --delete origin"

#---- dev

export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"

#---- yq

if [ $commands[yq] ]; then
  source <(yq shell-completion --variation=zsh)
fi

#---- vagrant

alias v='vagrant'
alias vs='vagrant status'
alias vu='vagrant up --provision'
alias vd='vagrant destroy -f'

#---- python


#---- go

export PATH=$PATH:/usr/local/go/bin

#---- node

export NVM_DIR="/home/bkaplan/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

export NVM_SYMLINK_CURRENT=true

export CPPFLAGS=-I/usr/local/opt/openssl/include
export LDFLAGS=-L/usr/local/opt/openssl/lib

function vi-npm-check {
  if [[ -f .ncurc.json ]]; then
    ignores=($(cat .ncurc.json | jq -r '.reject | map("--ignore "+.) | join(" ")'))
  else
    ignores=""
  fi
  npm-check --update-all --save-exact --no-emoji --skip-unused "${ignores[@]}"
}

function vi-npm-check-ro {
  if [[ -f .ncurc.json ]]; then
    ignores=($(cat .ncurc.json | jq -r '.reject | map("--ignore "+.) | join(" ")'))
  else
    ignores=""
  fi
  npm-check --no-emoji --skip-unused "${ignores[@]}"
}

function vi-npm-audit {
  npm audit fix --registry=https://registry.npmjs.org
}

#---- idea

alias idea=/snap/bin/intellij-idea-ultimate

#---- k8s

#[[ -f ~/.kubectl_aliases ]] && source ~/.kubectl_aliases

alias k=kubectl
alias kz=kustomize
alias h=helm

function k-dashboard-token {
  kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | awk '/^deployment-controller-token-/{print $1}') | awk '$1=="token:"{print $2}'
}

if [ $commands[kubectl] ]; then
  source <(kubectl completion zsh)
  source <(helm completion zsh)
fi

if [ $commands[k3d] ]; then
  source <(k3d completion zsh)
fi

export PATH="${KREW_ROOT:-$PATH:$HOME/.krew}/bin"

alias k9s='docker run --rm -it -v $KUBECONFIG:/root/.kube/config quay.io/derailed/k9s'

# https://github.com/ahmetb/kubectl-aliases
#[ -f ~/.kubectl_aliases ] && source ~/.kubectl_aliases

#---- docker

function docker-ps {
  docker ps --format="table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Networks}}"
}
function watch-docker-ps {
  watch 'docker ps --format="table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Networks}}"'
}

function docker-rm-all () {
	docker stop $(docker ps -a -q)
	docker rm $(docker ps -a -q)
	docker network prune -f
	docker volume prune -f
}

function docker-get-ip {
  [ -n $1 ] && docker inspect --format "{{ .NetworkSettings.IPAddress }}" $1
}

function docker-get-id {
  [ -n $1 ] && docker inspect --format "{{ .ID }}" $1
}

function docker-get-image {
  [ -n $1 ] && docker inspect --format "{{ .Image }}" $1
}

function docker-get-state {
  [ -n $1 ] && docker inspect --format "{{ .State.Running }}" $1
}

function docker-rmi-dangling {
  docker images -q --filter "dangling=true" | xargs -r docker rmi -f
}

function docker-remove-untagged-images {
  docker rmi $(docker images -q --filter "dangling=true")
}

function docker-remove-all-containers {
  docker rm -f $(docker ps -a -q)
}

function docker-remove-stopped-containers {
  docker rm -v $(docker ps -a -q -f status=exited)
}

function docker-remove-dangling-images {
 docker rmi $(docker images -q -f dangling=true)
}

function docker-volume-cleanup {
  docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes
}

#---- aws/ec2

source $HOME/.aws/env.zsh
#source /usr/local/bin/aws_zsh_completer.sh

#---- network commands

# alias net-ports='sudo netstat -ntlp | grep LISTEN'

#---- ansible

ansible-venv-27() { source ~/.venv/ansible-2.7/bin/activate }
ansible-venv-28() { source ~/.venv/ansible-2.8/bin/activate }

export ANSIBLE_VAULT_PASSWORD_FILE=$HOME/.ansible/vault-password
export ANSIBLE_HOST_KEY_CHECKING=False
export ANSIBLE_SSH_ARGS
export PYTHONHTTPSVERIFY=0

ansible-refresh-inventory() { ./inventory/aws/$@/ec2.py --refresh-cache }
ansible-requirements() { ansible-galaxy install --ignore-errors -r requirements.y*ml }

# for https://github.com/ansible/ansible/issues/31869#issuecomment-337769174, https://github.com/jhaals/ansible-vault/issues/60
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

function ansible-vault-decrypt-tree {
  for vf in $(find . -type f -name "vault*.yml"); do
    echo "Decrpyting ${vf}: $(ansible-vault decrypt ${vf})"
  done
}

function ansible-vault-encrypt-tree {
  for vf in $(find . -type f -name "vault*.yml"); do
    echo "Encrypting ${vf}: $(ansible-vault encrypt ${vf})"
  done
}

# https://github.com/octplane/ansible_stdout_compact_logger
alias ap='ANSIBLE_STDOUT_CALLBACK=anstomlog ansible-playbook'
alias _ap='ansible-playbook'

alias -g iP='-i inventory/aws/production'
alias -g iA='-i inventory/aws/ather'
alias -g iG='-i inventory/aws/ge'
alias -g iS='-i inventory/aws/staging'
alias -g iO='-i inventory/aws/ops'

alias -g pP='playbooks/hosts/aws'
alias -g pC='playbooks/hosts/configure'
alias -g pD='playbooks/deploy'
alias -g pA='playbooks/admin'
alias -g pT='playbooks/tenant'

alias -g stb='--skip-tags base'

alias -g cA='-a "/bin/bash -c ''''"'

#source ~/si/thirdparty/ansible/hacking/env-setup

#---- elasticsearch

# see ~/.zprezto/runcoms/zshenv

#---- uri encoding, from https://stackoverflow.com/a/10660730/3549299

urlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"    # You can either set a return variable (FASTER)
  REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}

urldecode() {
  printf -v REPLY '%b' "${1//%/\\x}" # You can either set a return variable (FASTER)
  echo "${REPLY}"  #+or echo the result (EASIER)... or both... :p
}

#==== auto environments

source ~/dotfiles/zsh-autoenv/autoenv.zsh

#eval "$(direnv hook zsh)"

#export PYENV_ROOT="$HOME/.pyenv"
#export PATH="$PYENV_ROOT/bin:$PATH"
#eval "$(pyenv init -)"

#[[ -f ~/.auto-venv ]] && source ~/.auto-venv

